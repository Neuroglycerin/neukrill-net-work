!obj:pylearn2.train.Train {
    dataset: &train !obj:neukrill_net.parallel_dataset.ParallelDataset {
        transformer: !obj:neukrill_net.augment.ParallelRandomAugment {
                preproc_list: [
                    {resize: %(final_shape)s,
                    normalise: {global_or_pixel: 'global',
                                mu: %(mu)s,
                                sigma: %(sigma)s}
                    },
                    {shape: %(final_shape)s,
                     invert: 1,
                    }
                    ],
                units: 'float',
                rotate: %(rotate)s,
                rotate_is_resizable: 0,
                flip: %(flip)s,
                shear: %(shear)s,
                shunt: %(shunt)s,
                scale: %(scale)s,
                scale_asym: %(scale_asym)s
            },
        settings_path: %(settings_path)s,
        run_settings_path: %(run_settings_path)s
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: &batch_size 128,
        input_source: ['img_1','img_2'],
        input_space: !obj:pylearn2.space.CompositeSpace {
            components: [
                !obj:pylearn2.space.Conv2DSpace {
                    shape: %(final_shape)s,
                    num_channels: 1,
                    axes: ['b', 0, 1, 'c'],},
                !obj:pylearn2.space.Conv2DSpace {
                    shape: %(final_shape)s,
                    num_channels: 1,
                    axes: ['b', 0, 1, 'c'],}
            ]
        },
        layers: [ !obj:pylearn2.models.mlp.FlattenerLayer {
                    raw_layer: !obj:pylearn2.models.mlp.CompositeLayer {
                        layer_name: 'parallel',
                        inputs_to_layers: {0:[0],1:[1]},
                        layers: [
                            !obj:pylearn2.models.mlp.MLP {
                                layer_name: "convlayer_1",
                                batch_size: *batch_size,
                                layers: [
                                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h1,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [5, 5],
                                         pool_shape: [3, 3],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h2,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [4, 4],
                                         pool_shape: [4, 4],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h3,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [4, 4],
                                         pool_shape: [4, 4],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 2.
                                     }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h4,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [4, 4],
                                         pool_shape: [4, 4],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 2.
                                     }
                            ]},
                            !obj:pylearn2.models.mlp.MLP {
                                layer_name: "convlayer_2",
                                batch_size: *batch_size,
                                layers: [
                                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h1,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [5, 5],
                                         pool_shape: [3, 3],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h2,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [4, 4],
                                         pool_shape: [4, 4],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h3,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [4, 4],
                                         pool_shape: [4, 4],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 2.
                                     },
                                ]}
                            ]
                        }
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     dim: 512,
                     max_col_norm: 1.5,
                     layer_name: h5,
                     istdev: .005,
                     init_bias: 0,
                     b_lr_scale: 2.,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     dim: 512,
                     max_col_norm: 1.5,
                     layer_name: h6,
                     istdev: .005,
                     init_bias: 0,
                     b_lr_scale: 2.,
                 }, !obj:pylearn2.models.mlp.FlattenerLayer {
                     raw_layer: !obj:pylearn2.models.mlp.CompositeLayer {
                     layer_name: 'y',
                     layers: [
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_1)i,
                            layer_name: y_1,
                            istdev: .01,
                            b_lr_scale: 2.,
                        },
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_2)i,
                            layer_name: y_2,
                            istdev: .01,
                            b_lr_scale: 2.,
                        },
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_3)i,
                            layer_name: y_3,
                            istdev: .01,
                            b_lr_scale: 2.,
                        },
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_4)i,
                            layer_name: y_4,
                            istdev: .01,
                            b_lr_scale: 2.,
                        },
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_5)i,
                            layer_name: y_5,
                            istdev: .01,
                            b_lr_scale: 2.,
                        },
                        !obj:pylearn2.models.mlp.Softmax {
                            n_classes: %(n_classes_6)i,
                            layer_name: y_6,
                            istdev: .01,
                            b_lr_scale: 2.,
                        }
                    ]
                }
                }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_sequential,
        batch_size: *batch_size,
        learning_rate: 0.1,
        learning_rule: !obj:neukrill_net.update_norm_monitor.UpdateNormMonitorLearningRule {
            base_learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
                init_momentum: 0.5
            },
            decay: 0.9,
        },
        monitoring_dataset: {
                'train': *train,
                'valid' : !obj:neukrill_net.parallel_dataset.ParallelDataset {
                    transformer: !obj:neukrill_net.augment.ParallelRandomAugment {
                            preproc_list: [
                                {resize: %(final_shape)s,
                                normalise: {global_or_pixel: 'global',
                                            mu: %(mu)s,
                                            sigma: %(sigma)s}
                                },
                                {shape: %(final_shape)s,
                                 invert: 1,
                                }
                                ],
                            units: 'float'
                        },
                    settings_path: %(settings_path)s,
                    run_settings_path: %(run_settings_path)s,
                    training_set_mode: 'validation'
                    }
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [ 
            !obj:pylearn2.costs.mlp.dropout.Dropout {
                input_include_probs: {
                    parallel: 1.,
                    h5 : 0.8,
                    h6 : 0.5,
                },
                input_scales: {
                    parallel : 1.,
                    h5 : 1.25,
                    h6 : 2.0,
                }
             },
             !obj:pylearn2.costs.mlp.WeightDecay {
                 coeffs : {
                        parallel : 0.00005,
                        h5 : 0.00005,
                        h6 : 0.00005,
                 }
             }
             ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        }
    },
    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 50,
            final_momentum: 0.75
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: valid_y_nll,
             save_path: '%(save_path)s'
        },
        !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
            high_trigger: 1.,
            low_trigger: 0.999,
            grow_amt: 1.1,
            shrink_amt: 0.8,
            max_lr: 1.,
            min_lr: 1e-5,
            channel_name: valid_y_y_1_nll
        }
    ],
    save_path: '%(alt_picklepath)s',
    save_freq: 1
}
