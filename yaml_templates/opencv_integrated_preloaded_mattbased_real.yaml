!obj:pylearn2.train.Train {
    dataset: &train !obj:neukrill_net.preloaded_passthrough_dataset.PreloadedPassthroughDataset {
        settings_path: %(settings_path)s,
        run_settings_path: %(run_settings_path)s,
        cached: %(cache)s,
        training_set_mode: 'train'
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: &batch_size 128,
        input_source: ['img_1','img_2'],
        input_space: !obj:pylearn2.space.CompositeSpace {
            components: [
                !obj:pylearn2.space.Conv2DSpace {
                    shape: %(final_shape)s,
                    num_channels: 1,
                    axes: ['b', 0, 1, 'c'],},
                !obj:pylearn2.space.VectorSpace {
                    dim: 170}
            ]
        },
        layers: [ !obj:pylearn2.models.mlp.FlattenerLayer {
                    raw_layer: !obj:pylearn2.models.mlp.CompositeLayer {
                        layer_name: parallel,
                        inputs_to_layers: {0:[0],1:[1]},
                        layers: [
                            !obj:pylearn2.models.mlp.MLP {
                                layer_name: convlayer,
                                batch_size: *batch_size,
                                layers: [
                                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h1,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [5, 5],
                                         pool_shape: [3, 3],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     },!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h2,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [3, 3],
                                         pool_shape: [3, 3],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 1.
                                     }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                                         layer_name: h3,
                                         output_channels: 48,
                                         irange: 0.05,
                                         kernel_shape: [3, 3],
                                         pool_shape: [3, 3],
                                         pool_stride: [2, 2],
                                         border_mode: full,
                                         b_lr_scale: 2.,
                                         max_kernel_norm: 2.
                                     }, !obj:pylearn2.models.mlp.RectifiedLinear {
                                         dim: 512,
                                         max_col_norm: 1.5,
                                         layer_name: h4,
                                         istdev: .005,
                                         init_bias: 0,
                                         b_lr_scale: 2.,
                                     }, 
                            ]},
                            !obj:pylearn2.models.mlp.MLP {
                                layer_name: passthrough,
                                batch_size: *batch_size,
                                layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                                     dim: 128,
                                     max_col_norm: 0.7,
                                     layer_name: h5,
                                     istdev: .01,
                                     init_bias: 0,
                                     b_lr_scale: 2.,
                                 }, ]}
                        ]}
                 },
                   !obj:pylearn2.models.mlp.RectifiedLinear {
                     dim: 512,
                     max_col_norm: 1.5,
                     layer_name: h5,
                     istdev: .01,
                     init_bias: 0,
                     b_lr_scale: 2.,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     n_classes: %(n_classes)i,
                     layer_name: y,
                     istdev: .05,
                     W_lr_scale: .25,
                     b_lr_scale: .25
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_sequential,
        batch_size: *batch_size,
        learning_rate: 0.05,
        learning_rule: !obj:neukrill_net.update_norm_monitor.UpdateNormMonitorLearningRule {
            base_learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
                init_momentum: 0.5
            },
            decay: 0.9,
        },
        monitoring_dataset: {
                'train': *train,
                'valid' : !obj:neukrill_net.preloaded_passthrough_dataset.PreloadedPassthroughDataset  {
                                settings_path: %(settings_path)s,
                                run_settings_path: %(run_settings_path)s,
                                cached: %(cache)s,
                                training_set_mode: "validation"
                            },
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [ 
            !obj:pylearn2.costs.mlp.dropout.Dropout {
                input_include_probs: {
                    parallel: 0.5,
                    h5 : 0.5,
                },
                input_scales: {
                    parallel: 2.0,
                    h5 : 2.0,
                }
             },
             !obj:pylearn2.costs.mlp.WeightDecay {
                 coeffs : {
                        parallel : 0.00005,
                        h5 : 0.00005,
                 }
             }
             ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        }
    },
    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 200,
            final_momentum: 0.95
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: valid_y_nll,
             save_path: '%(save_path)s'
        },
        !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
            high_trigger: 1.,
            low_trigger: 0.999,
            grow_amt: 1.1,
            shrink_amt: 0.8,
            max_lr: 1.,
            min_lr: 1e-5,
            channel_name: valid_y_nll
        }
    ],
    save_path: '%(alt_picklepath)s',
    save_freq: 1
}
