!obj:pylearn2.train.Train {
    dataset: &train !obj:neukrill_net.parallel_dataset.ParallelDataset {
        transformer: !obj:neukrill_net.augment.ParallelRandomAugment {
                preproc_list: [
                    {resize: %(final_shape)s,
                     invert: 1,
                    },
                    {shape: %(final_shape)s,
                     invert: 1,
                    }
                    ],
                units: 'float',
                rotate: %(rotate)s,
                rotate_is_resizable: 0,
                flip: %(flip)s,
                shear: %(shear)s,
                shunt: %(shunt)s,
                scale: %(scale)s,
                scale_asym: %(scale_asym)s
            },
        settings_path: %(settings_path)s,
        run_settings_path: %(run_settings_path)s
    },
    model: &model !obj:pylearn2.monitor.push_monitor {
        model: !pkl: "/disk/scratch/neuroglycerin/models/continue_hopeful_v2_benched.pkl",
        name: "monitor_validation"
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_sequential,
        batch_size: 128,
        learning_rate: .015,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.0
        },
        monitoring_dataset: {
                'train': *train,
                'valid' : !obj:neukrill_net.parallel_dataset.ParallelDataset {
                    transformer: !obj:neukrill_net.augment.ParallelRandomAugment {
                            preproc_list: [
                                {resize: %(final_shape)s,
                                 invert: 1,
                                },
                                {shape: %(final_shape)s,
                                 invert: 1,
                                }
                                ],
                            units: 'float'
                        },
                    settings_path: %(settings_path)s,
                    run_settings_path: %(run_settings_path)s,
                    training_set_mode: 'validation'
                    }
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [ 
            !obj:pylearn2.costs.mlp.dropout.Dropout {
                input_include_probs: {
                    parallel: 1.,
                    h5 : 0.5
                },
                input_scales: {
                    parallel : 1.,
                    h5 : 2.
                }
             },
             !obj:pylearn2.costs.mlp.WeightDecay {
                 coeffs : {
                        parallel : 0.00005,
                        h5 : 0.00005
                 }
             }
             ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        }
    },
    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: 0.8
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: valid_y_nll,
             save_path: '%(save_path)s'
        },
        !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
            high_trigger: 1.,
            low_trigger: 0.999,
            grow_amt: 1.015,
            shrink_amt: 0.983,
            max_lr: 0.4,
            min_lr: 1e-5,
            channel_name: valid_y_nll
        }
    ],
    save_path: '%(alt_picklepath)s',
    save_freq: 1
}
